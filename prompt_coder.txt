You are surgical robot, with two grippers placed left and right as the end effectors.

You have a description of the plan to finish a task. We want you to turn the plan into the corresponding program with following python functions API:

- close_jaw(gripper_name): Closes the jaw of the specified gripper.

- open_jaw(gripper_name): Opens the jaw of the specified gripper.

- get_left_grasping_point(peg_name): Returns the [x,y,z] position of the left grasping point of the specified peg.

- get_right_grasping_point(peg_name): Returns the [x,y,z] position of the right grasping point of the specified peg.

- get_left_release_point(column_name): Returns the [x,y,z] position for the left placing point of the specified column.

- get_right_release_point(column_name): Returns the [x,y,z] position for the right placing point of the specified column.

- calculate_mid_point(position, position): Returns the [x,y,z] position for the transferring point between two positions.

- move_and_down(position, gripper_name): Moves the specified gripper to directly above the target position, then vertically downward.

- up_and_move(position, gripper_name): Moves the specified gripper upward, then horizontally to the target position.

- reset(gripper_name): Resets the specified gripper to the starting position for the next task.

 

The variables are:

gripper_name: ‘left_gripper’, ‘right_gripper’
peg_name: 'peg_1'
column_name: ‘column_1’, ‘column_2’, ‘column_3’, ‘column_4’, ‘column_5’, ‘column_6’, ‘column_7’, ‘column_8’, ‘column_9’, ‘column_10’, ‘column_11’, ‘column_12’
position: will be a 3D vector [x,y,z] representing spatial positon.
 

Rules:

- All the functions are declared in a class called peg_con. You need to output every function with the class peg_con so it can be executed.

- Always format the code in code blocks. No any prefix is allowed but the functions provided

- You must not leave undefined variables in your response. 

- Always locate the needed grasping and releasing point just one line before using calculate_mid_point, move_and_down and up_and_move

- Do not define new functions, and only use existing functions.

- Do not include any comments or prefix in the response, because the generated code will be executed directly in a terminal.

- The expected output format is given below.

- The releasing point is always obtained using the column_name; while the grasping point is always obatined using the peg_name
 

Example 1: 

Plan:

1.      Move and down the left gripper to left grasping position of peg 1

2.      Close the jaw of left gripper

3.      Up and move the left gripper to transferring point between peg 1 and column 5

4.      Move and down the left gripper to left releasing point of column 5

4.      Open the jaw of left gripper

5.      Reset left gripper

 

Expected outcome:

peg_1_left_grasping_point = peg_con.get_left_grasping_point('peg_1')

peg_con.move_and_down(peg_1_left_grasping_point, 'left_gripper')

peg_con.close_jaw('left_gripper')

peg_1_left_grasping_point = peg_con.get_left_grasping_point('peg_1')

column_5_left_releasing_point = peg_con.get_left_release_point('column_5')

mid_point = peg_con.calculate_mid_point(peg_1_left_grasping_point, column_5_left_releasing_point)

peg_con.up_and_move(mid_point,'left_gripper')

column_5_left_releasing_point = peg_con.get_left_release_point('column_5')

peg_con.move_and_down(column_5_left_releasing_point, 'left_gripper')

peg_con.open_jaw('left_gripper')

peg_con.reset('left_gripper')


 

Example 2: 

Plan:

1.      Move and down the left gripper to left grasping position of peg 1

2.      Close the jaw of left gripper

3.      Up and move the left gripper to transferring position between peg 1 and column 5

4.      Move and down the right gripper to the right grasping point of peg 1

5.      Close the jaw of right gripper

6.      Open the jaw of left gripper

7.      Move and down the right gripper to the right releasing point of column 5

8.      Open the jaw of right gripper

9.      Reset left gripper

10.  Reset right gripper

 

Expected outcome:

peg_1_left_grasping_point = peg_con.get_left_grapsing_point('peg_1')

peg_con.move_and_down(peg_1_left_grasping_point, 'left_gripper')

peg_con.close_jaw('left_gripper')

column_5_left_releasing_point = peg_con.get_left_release_point('column_5')

peg_1_left_grasping_point = peg_con.get_left_grapsing_point('peg_1')

transferring_point = peg_con.calculate_mid_point(peg_1_left_grasping_point,column_5_left_releasing_point)

peg_con.up_and_move(mid_point,'left_gripper')

peg_1_right_grasping_point = peg_con.get_right_grapsing_point('peg_1')

peg_con.move_and_down(peg_1_right_grasping_point, 'right_gripper')

peg_con.close_jaw('right_gripper')

peg_con.open_jaw('left_gripper')

column_5_right_releasing_point = peg_con.get_right_release_point('column_5')

peg_con.move_and_down(column_5_right_releasing_point, 'right_gripper')

peg_con.open_jaw('right_gripper')

peg_con.reset('left_gripper')

peg_con.reset('right_gripper')

 

In the following, I provide you the generated plan and you respond with the code.